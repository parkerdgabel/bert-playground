# Ordinal Regression Configuration Example
# For problems with ordered categories (e.g., ratings, severity levels)

model:
  name: "mlx-community/answerdotai-ModernBERT-base-4bit"
  task_type: "ordinal"
  num_classes: 5  # e.g., 1-star to 5-star ratings
  pooling_type: "attention"  # Attention pooling works well for ordinal
  hidden_dim: 256
  activation: "gelu"
  dropout_rate: 0.1
  use_layer_norm: true
  
  # Ordinal class names (in order)
  class_names:
    - "very_poor"
    - "poor"
    - "average"
    - "good"
    - "excellent"
  
  # Head-specific configuration
  head_config:
    temperature: 1.0  # Controls threshold sharpness
    # Optional: class weights for imbalanced ordinal data
    class_weights: [1.5, 1.2, 1.0, 1.1, 1.3]

training:
  batch_size: 32
  learning_rate: 1e-5  # Lower LR for ordinal tasks
  num_epochs: 15
  gradient_accumulation_steps: 2
  warmup_ratio: 0.1
  weight_decay: 0.01
  
  # Optimizer configuration
  optimizer:
    type: "adamw"
    betas: [0.9, 0.999]
    eps: 1e-8
  
  # Learning rate schedule
  scheduler:
    type: "cosine"
    num_cycles: 1

data:
  max_sequence_length: 256
  text_column: "review_text"
  label_column: "rating"  # Should contain values 0-4 for 5 classes
  
  # Data preprocessing
  preprocessing:
    # Convert ratings to 0-indexed
    label_mapping:
      "1": 0
      "2": 1
      "3": 2
      "4": 3
      "5": 4
  
  # Augmentation suitable for ordinal data
  augmentation:
    enabled: true
    preserve_label_order: true  # Important for ordinal
    techniques:
      - "paraphrase"
      - "synonym_replacement"

evaluation:
  # Metrics suitable for ordinal regression
  metrics:
    - "ordinal_accuracy"  # Exact match
    - "mae"  # Mean absolute error
    - "ordinal_mae"  # Treats classes as ordered
    - "quadratic_weighted_kappa"  # Common for ordinal tasks
    - "spearman_correlation"
  
  primary_metric: "quadratic_weighted_kappa"
  
  # Confusion matrix analysis
  analyze_confusion_matrix: true
  plot_ordinal_distribution: true